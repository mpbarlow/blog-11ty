<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://barlow.dev">
  <title>barlow.dev</title>
  <subtitle>A blog about programming and whatever else irks me enough to write about.</subtitle>
  <link href="https://barlow.dev/feed.xml" rel="self"/>
  <link href="https://barlow.dev"/>
  <updated>2025-02-21T19:38:40Z</updated>
  <icon>https://barlow.dev/img/favicon.png</icon>
  <id>https://barlow.dev</id>
  <author>
    <name>Matt Barlow</name>
    <email></email>
  </author>
  <entry>
    <title>Apple pulls Advanced Data Protection in the UK</title>
    <link href="https://barlow.dev/posts/apple-pulls-adp-in-uk/"/>
    <updated>2025-02-21T19:38:40Z</updated>
    <id>https://barlow.dev/posts/apple-pulls-adp-in-uk/</id>
    <content xml:lang="en" type="html">&lt;p&gt;🔗: &lt;a href=&quot;https://www.bbc.co.uk/news/articles/cgj54eq4vejo&quot;&gt;https://www.bbc.co.uk/news/articles/cgj54eq4vejo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Realistically this is the only thing they really could have done. My understanding is that while the Snooper&#39;s Charter allows for appeal, parties issued a technical capability notice must still begin work on implementing a backdoor while any appeal is ongoing. I&#39;ve read much rumbling on Mastodon that this is another example of Apple rolling over at the first provocation, but this law is so insidious that real people working for Apple in the UK could face real consequences if they attempted to dig their heels in.&lt;/p&gt;
&lt;p&gt;It&#39;s actually entirely possible that the UK government might still intend to enforce this notice for access to the data of the users who already have ADP enabled, and this is Apple&#39;s attempt at limiting the number of people believing themselves to be secure who in fact will shortly not be. Alternatively, the government may have accepted this as a good-enough outcome that avoids the inevitable conflict with other laws internationally (not least of all the EU and the US).&lt;/p&gt;
&lt;p&gt;Once again, I am ashamed to be British. In recent history Labour have never been any better than the Tories when it comes to authoritarianism and paternalistic traits. The enforced secrecy is what I find most galling of all: at least have the decency to look us in the eye while you fuck us.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Link: Ed Zitron - What We&#39;re Fighting For</title>
    <link href="https://barlow.dev/posts/link-ed-zitron-what-were-fighting-for/"/>
    <updated>2025-02-20T13:01:22Z</updated>
    <id>https://barlow.dev/posts/link-ed-zitron-what-were-fighting-for/</id>
    <content xml:lang="en" type="html">&lt;blockquote&gt;
&lt;p&gt;The reason I&#39;m so onerously explaining this is that I do not believe the majority of people hate technology, but what the technology industry has become in search of growth. In fact, I&#39;d argue that deep down, many people love technology — we love that we can instantly connect to friends using little computers in our pockets, or that we can share photos or videos with effectively anyone with an internet connection. As &amp;quot;one of big tech&#39;s angriest critics,&amp;quot; I must confess I absolutely love what I can do with the computer, as deep down I&#39;m a brokenhearted romantic that can see, beneath all the slop, growth and bullshit are many, many things I truly, deeply love.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&#39;s a long read, but god damn. It sums up exactly the sadness and loathing I feel about modern software.&lt;/p&gt;
&lt;p&gt;🔗: &lt;a href=&quot;https://www.wheresyoured.at/what-were-fighting-for/&quot;&gt;https://www.wheresyoured.at/what-were-fighting-for/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Completing Advent of Code for the first and probably last time</title>
    <link href="https://barlow.dev/posts/advent-of-code-2024/"/>
    <updated>2025-02-06T22:09:35Z</updated>
    <id>https://barlow.dev/posts/advent-of-code-2024/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://barlow.dev/img/advent_of_code_2024.png&quot; alt=&quot;A screenshot of a complete Advent of Code 2024. A large ASCII-art number 10 is filled with various Christmas-themed patterns.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I completed Advent of Code for the first time. I&#39;m probably not gonna do it again.&lt;/p&gt;
&lt;p&gt;Am I glad I did it...I think I am? There were certainly a lot of times where I regretted my stubbornness and should have stopped, and it&#39;s safe to say that overall what fun and satisfaction I did get from solving the puzzles came nowhere close to offsetting the time I spent on it.&lt;/p&gt;
&lt;p&gt;This is all a &amp;quot;me&amp;quot; problem, of course. The amount of effort that must go into this every year, across such a wide range of subject matters, is staggering. I have a lot of respect for Eric Wastl and everyone involved in creating and running these.&lt;/p&gt;
&lt;p&gt;It just took me &lt;em&gt;so&lt;/em&gt; much time to do. I didn&#39;t time myself, but I think 100 hours total is probably a fair estimate. I don&#39;t think I have a healthy relationship with this kind of thing. Even though I wasn&#39;t competing with anyone, I really felt a need to prove to myself that I could do it, and while in the end I &lt;em&gt;could&lt;/em&gt;, it came at the expense of neglecting all my other hobbies. The books are piling up and those last fifteen or so poor Astro Bots are still awaiting rescue.&lt;/p&gt;
&lt;p&gt;I will give myself some small credit at least: while I needed pointers from the &lt;a href=&quot;https://www.reddit.com/r/adventofcode/&quot;&gt;/r/AdventofCode&lt;/a&gt; subreddit on a fair number of the puzzles (and full, step-by-step explanations of a few), I never looked at anyone else&#39;s code until I had a working solution myself, and I never submitted a correct answer without fully understanding my solution and why it worked.&lt;/p&gt;
&lt;p&gt;It&#39;s not all gloom though, there are some definite positives I got out of it.&lt;/p&gt;
&lt;p&gt;Last year (my first attempt) I chose Clojure and gave up around day 15—Lisps are very cool and something I want to explore more, but trying to solve tricky puzzles in a language so different to any programming I&#39;d ever done before was a bit much. This year I chose Swift—a language which I am very fond of but never get to use at work and so have little practical experience with—and I feel like I finished with a much better understanding of it and an eagerness to do more. Particularly devious puzzles notwithstanding, I felt myself speeding up in the back third because I was spending far less time hunting down dumb mistakes in my code and better utilising what the language offers.&lt;/p&gt;
&lt;p&gt;I also got to solve the sorts of computer science-y problems that you rarely see in many web development roles and that, realistically, I haven&#39;t encountered much since university. At work I&#39;ve optimised plenty of functions, decimated query runtimes, and delivered lots of features without upsetting an established codebase. To date, I&#39;ve never had to implement a pathfinding algorithm or identify the errors in a simulated 46-bit full adder in a professional context. More&#39;s the pity.&lt;/p&gt;
&lt;p&gt;That brings me onto my only real disagreement with how AoC is presented: the claim on &lt;a href=&quot;https://adventofcode.com/2024/about&quot;&gt;the About page&lt;/a&gt; that &amp;quot;a little programming knowledge and some problem solving skills will get you pretty far&amp;quot;. Personally, I find this to be highly unrealistic and will set a lot of people up for disappointment. I accept that it&#39;s a challenge for all skill levels, but if you don&#39;t have a basic familiarity with certain aspects of computer science and/or maths—graph traversal, dynamic programming, memoisation to name just a few—you are very unlikely to be able to solve many of the puzzles at all.&lt;/p&gt;
&lt;p&gt;In many ways it&#39;s not unlike cryptic crosswords: what appears to be indecipherable nonsense is actually a well-defined set of rules and patterns that those in the know can spot. And while I&#39;m sure you &lt;em&gt;could&lt;/em&gt; work it out without knowing those rules, you&#39;re about as likely to as you are to invent Dijkstra&#39;s algorithm from first principles.&lt;/p&gt;
&lt;p&gt;Anyway, this post only has one real purpose: if you&#39;re reading this, December 2025 Matt, just play the damn videogames and enjoy your Christmas break.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GenAI and papering over inefficiency</title>
    <link href="https://barlow.dev/posts/gen-ai-papering-over-inefficiency/"/>
    <updated>2025-01-04T18:28:35Z</updated>
    <id>https://barlow.dev/posts/gen-ai-papering-over-inefficiency/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I&#39;m not a fan of the current crop of generative AI products, as the folks I work with are no doubt already sick of hearing. I don&#39;t discount them completely, and for something that an LLM is very likely to get correct I&#39;m not above asking ChatGPT, especially with how god awful Google results seem to be these days. But I don&#39;t feel good about doing it, mostly for the common reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unprecedented-scale theft of the creative output of groups big and small to make established tech titans (or smaller companies bankrolled by a titan) ever more powerful&lt;/li&gt;
&lt;li&gt;the inability to truly trust anything they (very confidently) tell you&lt;/li&gt;
&lt;li&gt;the enormous energy use and associated environmental effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But something else has been bugging me, from a programmer mindset: many of the &amp;quot;best&amp;quot; uses for LLMs just vastly speed up crapping out something to satisfy an inefficient process, rather than doing anything to actually solve that inefficiency.&lt;/p&gt;
&lt;p&gt;Coding assistants make it very fast to generate boilerplate. Can&#39;t we spend just some of that unfathomably large pool of money and human effort to reduce the need for boilerplate in the first place? Boilerplate is by definition code we must write for our programs to work, but that doesn&#39;t contribute to solving the problem at hand; are we really just happy to accept that that&#39;s an unsolvable fact of life for a software developer?&lt;/p&gt;
&lt;p&gt;AI writing tools will turn your bullet points for a performance review or an email to your boss into professional-sounding prose. Your boss will then probably run it through the same tool to turn it back into bullet points. Why are we bothering to keep up this farce? Especially when the apparatus for doing so consumes the same energy as a small nation.&lt;/p&gt;
&lt;p&gt;It all feels like implementing arithmetic functions by running a random number generator until we get something that looks about right. In the programming world especially, I worry we&#39;re heading towards a future where we stop bothering to actually solve problems because some model will give us good enough, enough of the time. That probably sounds great to a lot of folks, but it makes me pretty sad.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Aura Carver mini review</title>
    <link href="https://barlow.dev/posts/aura-carver-mini-review/"/>
    <updated>2025-01-03T17:59:58Z</updated>
    <id>https://barlow.dev/posts/aura-carver-mini-review/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;img src=&quot;https://barlow.dev/img/aura.jpeg&quot; alt=&quot;A photo of the Aura Carver digital photo frame, showing a photo of me, my wife, and our dog at a Christmas Day Parkrun. The frame is perched atop an admittedly overcrowded half-height bookcase. There are two Christmas-themed rubber ducks in front of it, though I&#39;m not sure why.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Before Christmas, my wife mentioned it&#39;d be cool to get a digital photo frame to put some of the many, many photos we both take on display, instead of locked away on our phones. Both our phones do the &amp;quot;memories&amp;quot; thing, but they&#39;re never really &lt;em&gt;on display&lt;/em&gt; anywhere.&lt;/p&gt;
&lt;p&gt;A week later I was listening to &lt;a href=&quot;https://atp.fm/&quot;&gt;ATP&lt;/a&gt; and one of the sponsors was &lt;a href=&quot;https://auraframes.co.uk/&quot;&gt;Aura&lt;/a&gt;. They&#39;re far, &lt;em&gt;far&lt;/em&gt; from the cheapest digital photo frame out there, but it was a reasonable price for the Carver (their smallest unit, at 10.1&amp;quot;) and the hosts were waxing effusive about them, so I grabbed one as a Christmas gift.&lt;/p&gt;
&lt;p&gt;It&#39;s really great! There&#39;s a lot to like about it. The screen is bright and sharp with, at least to my eye, very good colour reproduction. 1280x800 on a 10&amp;quot; display doesn&#39;t sound like all that much these days, but from a typical distance you might look at a picture frame, it&#39;s plenty. The display is matte so you won&#39;t get any glaring reflections, and there is very little off-axis colour shifting if you&#39;re looking at it from different places in the room. It also automatically turns off when the room is dark, so when I turn out the lights to watch a movie it&#39;s not distracting.&lt;/p&gt;
&lt;p&gt;One thing I didn&#39;t realise until it was up and running is that it supports Apple&#39;s Live Photos, so you get a little bit of animation as the photos scroll in. Nice touch!&lt;/p&gt;
&lt;p&gt;The setup experience was smooth and their app is pretty nice. If you buy it as a gift, you&#39;re able to scan a QR code on the box and upload some initial photos as well as a welcome message, meaning as soon as it connects to Wi-Fi it&#39;s already up and running. One minor gripe is that they evidently sold more of these things than they were expecting and their backend went down on Christmas Day, leaving us unable to add more photos. The frame itself kept working, at least.&lt;/p&gt;
&lt;p&gt;That brings me onto my only real concern about this device, which is its cloud-based nature. For one, because it involves uploading our photos to a third-party—though unless I want to manage a USB drive of files, I don&#39;t really see how else it could work. An option to point it at my NAS would be awesome, but I completely understand why they wouldn&#39;t implement that for the 0.01% of nerds that would use it. For two, Aura promises free unlimited storage forever, which feels ripe for eventual enshittification if things get tough for them—or if they ever sell to a less scrupulous company. But hey, if that ever happens maybe someone will jailbreak the thing.&lt;/p&gt;
&lt;p&gt;That aside, it&#39;s a lovely thing to have in the house. I&#39;ve turned off the notifications that tell me when my wife has added new photos, because it&#39;s just such a delight to see new stuff pop up on it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Modern software has no respect for disk space</title>
    <link href="https://barlow.dev/posts/modern-software-has-no-respect-for-disk-space/"/>
    <updated>2024-05-24T22:10:27Z</updated>
    <id>https://barlow.dev/posts/modern-software-has-no-respect-for-disk-space/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I feel like it’s sorta common knowledge today, especially if you’re a developer, that most modern software does not give the slightest shit about gobbling up as much RAM and as many CPU cycles as it wants. Developer time is more expensive than hardware; especially if it’s someone else’s hardware you’re spending. It sucks, but it’s a known quantity at this point. What I &lt;em&gt;was&lt;/em&gt; somewhat surprised by recently is just how much of state things are in for disk hogging too.&lt;/p&gt;
&lt;p&gt;My wife is considering upgrading her base M1 MacBook Air to something with a bit more oomph. It’s done an admirable job, but only having two USB ports is annoying if you don’t have a monitor with USB Power Delivery and/or ports of its own for peripherals, and 8GB RAM is becoming a bottleneck when she has lots of Chrome tabs and Office documents open. Ya know: completely normal, non-nerd stuff.&lt;/p&gt;
&lt;p&gt;Apple’s pricing for storage is infamously price gouge-y, and we were looking at whether the extra £200 to jump from the 256GB storage she has now up to 512GB would be worth it, as her current machine only had about 20GB free.&lt;/p&gt;
&lt;p&gt;I loaded up DaisyDisk (a fantastic and inexpensive little piece of software by the way, &lt;a href=&quot;https://daisydiskapp.com/&quot;&gt;highly worth a look&lt;/a&gt;), and here’s some of the stuff I found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome.app was 8GB. Upon further investigation, inside the main bundle is another bundle called Google Chrome.framework, and inside &lt;em&gt;that&lt;/em&gt; was approximately 15 previous versions of itself that, for whatever reason, never got cleaned up.&lt;/li&gt;
&lt;li&gt;She has three Chrome profiles; one for each of her two jobs and one for personal browsing. Each of those was between 1 and 3GB—I’m still not entirely sure &lt;em&gt;why&lt;/em&gt;, as best I can tell it’s various caches.&lt;/li&gt;
&lt;li&gt;Microsoft Teams, despite somehow having a 1.2GB main app bundle, was storing a further 1.5GB of caches and other files.&lt;/li&gt;
&lt;li&gt;Backblaze internal files totalling 12GB. I actually already knew about this, as I’d ran across it before and discovered that &lt;a href=&quot;https://www.reddit.com/r/backblaze/comments/ay1d14/comment/eicz7fl/&quot;&gt;it’s by design&lt;/a&gt;. Backblaze’s logs of processed files are append-only, and their recommended solution is to just…abandon your backup every few years and push everything completely from scratch. I generally find Backblaze to be a great product, but this always felt like a huge miss to me.&lt;/li&gt;
&lt;li&gt;Time Machine local snapshots were taking up around 40GB total. This is supposedly purgeable space that is freed up as it’s needed but…well, more on that below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I then ran it on my own machine as, despite having a 512GB drive, I had much less storage free than I felt like I should given the relatively limited number of files I keep on the machine. I have a lot of developer tools which I know get pretty bloated, but even so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10GB of old versions of JetBrains tools. I had the setting enabled in JetBrains Toolbox to keep the last version installed to allow for instant rollback, but that doesn’t explain why I had stuff dating back to 2022. Thankfully there is a UI inside the app itself to clear these out.&lt;/li&gt;
&lt;li&gt;16GB of those fancy aerial wallpapers that were originally from the Apple TV. This one is sort of on me, given that I deliberately enabled the setting to cycle through them all. But, as far as I can see, there’s no way whatsoever to delete them from the same UI their downloads are triggered from (the Screen Saver area of System Settings). To remove them, I had to find them in &lt;code&gt;/Library/Application Support/com.apple.idleassetsd/Customer/4KSDR240FPS/&lt;/code&gt; and delete the files. Real user friendly.&lt;/li&gt;
&lt;li&gt;rustup, which I had installed to briefly play around with Rust, had installed 1.5GB of HTML documentation.&lt;/li&gt;
&lt;li&gt;My NPM cache was 5GB. Actually I’m not surprised by this at all; the entire Node and NPM ecosystem is a fucking mess and I am more surprised every day that it has not exploded spectacularly since &lt;code&gt;left-pad&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Something like 35GB of old iOS Simulators for Xcode. I appreciate that a professional iOS developer might need to keep the sims around for every point release of iOS, but is it too much to ask for a prompt or a setting to automatically clean up the old versions when new ones are installed? At least you can delete these from a UI in Xcode itself.&lt;/li&gt;
&lt;li&gt;60GB of local Time Machine snapshots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can appreciate that in a world of multi-hundred-gigabyte to multi-terabyte disks, griping about a handful of single-digit GB caches seems silly. But when seemingly every large software vendor rolls with the “it’s free real estate” attitude, it can and does add up—to the point where an entry-level machine ends up largely full of stuff that, as far as a typical user is a concerned, is not their files.&lt;/p&gt;
&lt;p&gt;When a computer runs out of RAM everything gets slow; when it runs out of disk, things &lt;em&gt;break&lt;/em&gt;, in ways that &lt;a href=&quot;https://sixcolors.com/post/2024/03/a-disk-so-full-it-couldnt-be-restored/&quot;&gt;can be difficult to recover from&lt;/a&gt;. Again, more on that below.&lt;/p&gt;
&lt;p&gt;To quote my wife, “what was I supposed to do if I wasn’t married to a nerd?”—and she’s completely right! Dragging Chrome.app and Teams.app to the trash would have done nothing to clean up the even-larger-still caches sitting there in some obscure system directory.&lt;/p&gt;
&lt;h2&gt;Addendum: Does anyone at Apple still work on Time Machine?&lt;/h2&gt;
&lt;p&gt;Time Machine under macOS Sonoma is just knackered.&lt;/p&gt;
&lt;p&gt;If you use Time Machine, do a backup and let it finish. Then, close all your applications, quit any background applications you know are running, then just let your machine idle for an hour. Do another backup after that hour, and there’s a good chance Time Machine will claim to find tens of thousands of changes and then proceed to very slowly copy between several hundred MB and a few GB to your backup disk. Every. Single. Hour.&lt;/p&gt;
&lt;p&gt;Ascertaining the real size of files on Macs, particularly APFS-formatted drives, &lt;a href=&quot;https://eclecticlight.co/2024/05/08/how-accurate-are-the-finders-folder-and-volume-sizes/&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;https://eclecticlight.co/2024/01/03/what-should-we-know-about-apfs-special-files/&quot;&gt;notoriously&lt;/a&gt; &lt;a href=&quot;https://eclecticlight.co/2023/12/25/where-are-the-sanity-checks/&quot;&gt;difficult&lt;/a&gt;, but I can see the free disk space on my backup drive ticking down—stuff is actually being written.&lt;/p&gt;
&lt;p&gt;I know there’s system-level stuff going on in the background that will account for &lt;em&gt;some&lt;/em&gt; changes, even if you’re not actively using the computer. But there’s nothing beyond bugs that should account for that volume of data changing.&lt;/p&gt;
&lt;p&gt;Next up: local snapshots. As I mentioned above, this is considered purgeable space by macOS, to be freed up when needed. Well, it doesn’t work very well.&lt;/p&gt;
&lt;p&gt;Last month, I was downloading a ~150GB torrent. I intended to move it immediately off to a network drive after completion, Finder told me I had about 220GB free, and I was downloading to a folder excluded from Time Machine as I have no need for it to be part of my main backup. To me, this seemed totally fine.&lt;/p&gt;
&lt;p&gt;Imagine my alarm then when I checked up on things after 30 mins to find that the download had stopped due to insufficient disk space. Random apps I had open were popping up scary warnings, and &lt;code&gt;df&lt;/code&gt; was reporting 100% usage of my main Data volume (where user files are stored in modern macOS).&lt;/p&gt;
&lt;p&gt;I suspected local snapshots were to blame, but &lt;code&gt;tmutil&lt;/code&gt; commands were hanging, and I feared that if I tried to reboot the machine I wouldn’t be able to get back into it. I eventually found around a GB of build files I could regenerate, deleted them to free up some space, and was then able to run &lt;code&gt;tmutil listlocalsnapshots&lt;/code&gt; and &lt;code&gt;tmutil deletelocalsnapshots&lt;/code&gt; to clear out what was there, and whaddayaknow: everything immediately worked fine again.&lt;/p&gt;
&lt;p&gt;APFS snapshots operate independently of Time Machine exclusions, so it’s no surprise that changes to a directory excluded from backup would still result in snapshots, but that does not change the fact that &lt;em&gt;this should not happen&lt;/em&gt;. There should be no circumstance in which a file transfer that should leave 70GB of free disk space instead results in the system becoming so full that it’s borderline inoperable.&lt;/p&gt;
&lt;p&gt;So now I’m in a bit of a dilemma. I’ve long worked under the “two is one, one is none” mantra for backups, with one on-site and one off-. But I trust Time Machine so little now that I’m not even sure it &lt;em&gt;would&lt;/em&gt; successfully recover my data if I needed it to. Maybe time to finally give Carbon Copy Cloner or SuperDuper a try.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Network woes with my Raspberry Pi media server</title>
    <link href="https://barlow.dev/posts/network-woes-with-raspberry-pi/"/>
    <updated>2024-05-13T21:50:35Z</updated>
    <id>https://barlow.dev/posts/network-woes-with-raspberry-pi/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;For desperate and frustrated people&lt;/h2&gt;
&lt;p&gt;I&#39;ve lost two seperate evenings to this so I might as well get a quick blog post out of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you don&#39;t need my life story, here&#39;s the tl;dr:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenMediaVault expects to be in sole control of the machine it runs on when installed on bare metal (i.e. not as a Docker container)&lt;/li&gt;
&lt;li&gt;It will pick up the &lt;code&gt;tailscale0&lt;/code&gt; interface and attempt to create a Netplan config for it, but because that interface doesn&#39;t have a MAC address, the config file will be malformed and prevent all networking from starting up on next boot&lt;/li&gt;
&lt;li&gt;Delete or move &lt;code&gt;/etc/netplan/20-openmediavault-tailscale0.yaml&lt;/code&gt; and reboot&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;My setup&lt;/h2&gt;
&lt;p&gt;I&#39;m running a Raspberry Pi 4 connected to a couple of USB hard drives as a quick-and-dirty home media server. I run OpenMediaVault because it has a nice web interface and I&#39;m too lazy to set the Samba shares up myself, and it&#39;s on my Tailscale tailnet so I can stream stuff away from home. It works very nicely and was not a lot of cost or effort to set up.&lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;A few weeks ago we had a brief power cut and I lost my year+ uptime streak for the Pi, which had been running dutifully since the day I bought it. However, when power returned I could no longer access my media nor SSH in, either via Tailscale or directly over the LAN. It wasn&#39;t showing up as a connected device on my router either.&lt;/p&gt;
&lt;p&gt;Fearing something had fried, I got it connected to a monitor (really glad I bought that micro-HDMI cable!) to find that it was completely fine, but that the &lt;code&gt;eth0&lt;/code&gt; interface was down. Bringing it up manually didn&#39;t yield much; it wouldn&#39;t get an IP and my router just wasn&#39;t seeing it.&lt;/p&gt;
&lt;p&gt;I can use Linux well enough, and set up and debug typical webserver stuff thanks to my day job, but when it comes to low-level OS and hardware config stuff, I&#39;m very much out of my depth. After a few hours of fruitless Googling, I gave up and assumed that something on the SD card must have been corrupted by the power outage. That seemed unlikely, but SD corruption does seem to be fairly common with Pis and I didn&#39;t have much else to go on.&lt;/p&gt;
&lt;p&gt;So I wiped the SD card, flashed a new OS image, set Tailscale and OMV up from scratch again, and all was well with the world.&lt;/p&gt;
&lt;p&gt;Today I got a new drive to add to the pool, so I powered the Pi off (properly) so I could rejig what was plugged into which port. I turned it back on and...no network again. Connected it back up to a monitor and, once again, &lt;code&gt;eth0&lt;/code&gt; was down and completely uncooperative.&lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;Driven by a suspicion now that this was not some random corruption and would keep happening, and that I &lt;em&gt;really&lt;/em&gt; couldn&#39;t be arsed to set everything up from scratch again, I set off on another aimless Google journey.&lt;/p&gt;
&lt;p&gt;Among some sage advice to people with similar problems, I came across a suggestion to check the output from &lt;code&gt;journalctl&lt;/code&gt;. This is probably incredibly obvious to people who know more stuff about Linux, but as they say: every day&#39;s a school day.&lt;/p&gt;
&lt;p&gt;This gave me something—very helpfully rendered in bright red—that led to the solution: &lt;code&gt;netplan returned non-zero exit status 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After some quick learning about what Netplan is and how I might find the exact issue, I found (with some excitement) that it was due to a malformed YAML file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://barlow.dev/img/network_problem_solved.jpeg&quot; alt=&quot;An iMessage conversation of the moment I found the problem, with an error message from netplan apply&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It would appear that, either on installation or when changing some config, OpenMediaVault generates a set of Netplan configs for each network interface on the machine. It includes the MAC address, but because &lt;code&gt;tailscale0&lt;/code&gt; isn&#39;t a physical device and doesn&#39;t &lt;em&gt;have&lt;/em&gt; a MAC address, the resulting file is invalid.&lt;/p&gt;
&lt;p&gt;I moved this file elsewhere, rebooted, and everything worked perfectly again. I&#39;ve tried connecting via Tailscale outside of my LAN and it seems to still work perfectly fine, so this file doesn&#39;t appear to be necessary at all.&lt;/p&gt;
&lt;p&gt;I&#39;m unsure if the file will come back as a result of some change or update, but at least I know how to fix it now. If it &lt;em&gt;does&lt;/em&gt; come back, I&#39;ll probably look at a Dockerised solution for OMV. It looks like OMV expects to be the only thing managing the machine, and not for someone to be fiddling around introducing new network interfaces. Amusingly, both of the times this has happened have been so delayed because I just never rebooted the Pi after setting up OMV. If I had, I&#39;d have ran into the issue immediately and probably put the pieces together much quicker.&lt;/p&gt;
&lt;p&gt;Anyway, I couldn&#39;t find any reports of this exact problem, so here&#39;s hoping this will be of help to someone out there, even if it&#39;s just me in the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fluent interface pitfalls</title>
    <link href="https://barlow.dev/posts/fluent-interface-pitfalls/"/>
    <updated>2024-02-08T21:34:46Z</updated>
    <id>https://barlow.dev/posts/fluent-interface-pitfalls/</id>
    <content xml:lang="en" type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Fluent interfaces are very common in the PHP world, as well as many other object-oriented languages. They can provide a very nice way to interface with classes, but they’re often misused—completely accidentally.&lt;/p&gt;
&lt;p&gt;For those not familiar with the term, it’s literally just when methods on an object return the object itself (or, more rarely, a copy) to support method chaining. Configuration is performed in steps, forming a pseudo-DSL that reads nicely and has the potential to be very flexible. It also looks slick, which shouldn’t be a factor, but I think often is.&lt;/p&gt;
&lt;p&gt;Here’s an example. This class performs a file upload to some abstracted filesystem (for example a local disk or S3), with optional logging. Realistically, you probably wouldn’t need a dedicated class for this, but let’s imagine there’s enough additional business logic required that would warrant it.&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;Uploader&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;LoggerInterface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$logger&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name type-declaration&quot;&gt;FilesystemInterface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$disk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;withLogging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;LoggerInterface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword return-type&quot;&gt;static&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;toDisk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;FilesystemInterface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$disk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword return-type&quot;&gt;static&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$disk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword type-hint&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword type-hint&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword return-type&quot;&gt;static&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;Uploading &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Perform some business logic...&lt;/span&gt;

        &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;disk&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;Uploaded &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$filename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uploader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withLogging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toDisk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$disk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;howdy.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;Me again&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first glance this is pretty nice. It reads imperatively, which makes it very simple to understand, and because the configuration is done in stages, it would be easy to wrap parts in conditionals to set things up a little differently if we need to. We can also chain as many files as we like.&lt;/p&gt;
&lt;p&gt;It’s a somewhat contrived example, but it’s a common pattern you are likely to see in real codebases. We have a problem though.&lt;/p&gt;
&lt;h2&gt;Partial construction&lt;/h2&gt;
&lt;p&gt;We have correctly modelled the fact that logging is optional by making &lt;code&gt;$logger&lt;/code&gt; nullable and by using the null-safe operator when attempting to call methods on it. If the consumer of our class has no interest in logging, they need not even be aware that the class is capable of it.&lt;/p&gt;
&lt;p&gt;However, the &lt;em&gt;raison d’être&lt;/em&gt; of this class is to write a file to a disk. The disk is a mandatory dependency; calling &lt;code&gt;upload()&lt;/code&gt; without one set is nonsense, and will quite rightly crash if you try. But, in the way this is modelled, it isn’t mandatory at all: the object is in an invalid, incomplete state until the moment the consumer calls &lt;code&gt;toDisk()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You could add a check to throw an exception up-front if no disk is set, but this solves almost nothing—the consumer is still forced to understand implementation details of the class in order to use it, making it quite the leaky abstraction.&lt;/p&gt;
&lt;p&gt;One of the most powerful ways to reduce both runtime bugs and “code-time” mental load is to &lt;a href=&quot;https://kevinmahoney.co.uk/articles/my-principles-for-building-software/#make-invalid-states-unrepresentable&quot;&gt;make invalid states unrepresentable&lt;/a&gt;. Put simply, this is where you make nonsense situations like the above impossible, such that you don’t need to worry about guarding against them. It’s not always easy with the runtime-only nature of PHP’s type system, but by putting some thought into the design of your classes, you can almost always avoid it.&lt;/p&gt;
&lt;p&gt;The fix here is really simple: scrap &lt;code&gt;toDisk()&lt;/code&gt;, and make &lt;code&gt;$disk&lt;/code&gt; a non-nullable parameter to &lt;code&gt;Uploader&lt;/code&gt;’s constructor. Not only does this make the dependency between &lt;code&gt;Uploader&lt;/code&gt; and &lt;code&gt;FilesystemInterface&lt;/code&gt; crystal clear to consumers, but it also makes it impossible to even instantiate the class without everything it needs to perform its functions.&lt;/p&gt;
&lt;p&gt;If your class has multiple methods that each require different dependencies, you might instead opt to pass them to the individual methods. This ultimately has the same effect, though more than a couple and it’s worth asking yourself if the class has too many concerns and should be broken up.&lt;/p&gt;
&lt;p&gt;The key point here is that fluent interfaces should only be used for configuration, not construction. If your code can’t work without it, it shouldn’t be possible to &lt;em&gt;not&lt;/em&gt; provide it.&lt;/p&gt;
&lt;p&gt;Even classes that take method chaining to an extreme can be designed in such a way that the object is never left in an invalid state. For example, you can call &lt;code&gt;get()&lt;/code&gt; on a completely naked &lt;a href=&quot;https://laravel.com/docs/10.x/queries&quot;&gt;Eloquent query builder&lt;/a&gt;, and the result is perfectly valid and logical (it just runs a &lt;code&gt;SELECT * FROM &amp;lt;table&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Digital Febreeze&lt;/h2&gt;
&lt;p&gt;Another case where fluent interfaces can cause unintended problems is their ability to hide code smells, particularly for methods with too many responsibilities.&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;Example&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;amendAccount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$accountRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$amount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$recalculateBefore&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$notifyHolders&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;LoggerInterface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$logger&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;AccountService&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$overrideHandler&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;MailerInterface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$mailer&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword return-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;amendAccount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;northlight&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mailer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s context-dependent of course, but seeing something like the code above is quite likely to set off your developer-spidey-sense right away. Seven parameters, lots of flags and overrides, and a bunch of them are optional? That has all the hallmarks of a method that’s had tons of stuff bolted onto it, and has come to do far too much over time.&lt;/p&gt;
&lt;p&gt;But would you raise an eyebrow seeing this instead?&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;Example&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;withLogging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name type-declaration&quot;&gt;LoggerInterface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword return-type&quot;&gt;static&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// More setters for each optional parameter...&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;amendAccount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$accountRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$amount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword return-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withLogging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendMailVia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mailer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;amendAccount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;northlight&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m not sure I would unless I had a reason to dig into the implementation. There are hints—for example exposing tons of setter methods of questionable relevance—but it’s far less obvious because the optional dependencies are omitted implicitly.&lt;/p&gt;
&lt;p&gt;And yet, there is no difference! Plus or minus a few cases of &lt;code&gt;$this&lt;/code&gt;, the implementation of &lt;code&gt;amendAccount()&lt;/code&gt; could be identical between both examples. We have not addressed the source of the smell; we’ve just masked it with something superficially more pleasant.&lt;/p&gt;
&lt;p&gt;Unlike the previous point, I don’t think there’s an easy rule to follow here. After all, the main benefit of fluent interfaces is make configuration less onerous and more legible. However, I think it goes to show that adding a fluent interface is something that should be carefully considered, because they can easily mask &lt;a href=&quot;http://worrydream.com/refs/Brooks-NoSilverBullet.pdf&quot;&gt;accidental complexity&lt;/a&gt;—especially as a unit of code grows over time.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Testing a class that uses a fluent interface isn’t so bad; testing a class whose &lt;em&gt;dependencies&lt;/em&gt; use fluent interfaces is a pain in the arse.&lt;/p&gt;
&lt;p&gt;This is because you have to mock out the expectations for each individual method in the chain. Not only does this add extra boilerplate, but such expectations are typically more brittle because the nature and order of configuration methods are far more likely to change than the final call to the method that actually does something.&lt;/p&gt;
&lt;p&gt;There are some quality-of-life options such as &lt;a href=&quot;https://docs.mockery.io/en/latest/reference/demeter_chains.html&quot;&gt;Mockery’s support for chained expectations&lt;/a&gt;, but string-typing is never good (they’re unlikely to be picked up by any IDE refactoring you might do, for a start) and they’re still subject to brittleness around ordering.&lt;/p&gt;
&lt;h2&gt;The state of things&lt;/h2&gt;
&lt;p&gt;It’s not something you see discussed all that much because it’s a functional concern about an extremely object-oriented design pattern, but fluent interfaces also tend to lead to a lot of mutable state. Typically each call in the chain will modify the object in place before returning it. It doesn’t &lt;em&gt;have&lt;/em&gt; to work this way—in the first example above, you could return a brand new &lt;code&gt;Uploader&lt;/code&gt; with a logger set, then a further new instance with both the logger and the disk set—but this is not often done and, in languages like PHP where immutability is not a core feature, can be awkward and costly to performance.&lt;/p&gt;
&lt;p&gt;At a theory level, the problem with mutable state is the explosion of possible combinations your code can be in as more and more moving pieces are added—I think it’s safe to say we’ve all had &lt;a href=&quot;https://www.youtube.com/watch?v=1NBfZcNU4O0&quot;&gt;Pepe Silvia&lt;/a&gt; moments trying to work out the exact sequence of events that caused a bug we didn’t think was possible.&lt;/p&gt;
&lt;p&gt;At a practical level, it means you have to be incredibly careful when passing around and reusing highly stateful objects, because changes you make in one place will carry through to subsequent calls. If you write PHP, how many times have you accidentally mutated a regular &lt;code&gt;DateTime&lt;/code&gt; when trying to create a new date relative to an existing one? More than once I bet!&lt;/p&gt;
&lt;p&gt;As I said, I’m probably barking up the wrong tree; object-oriented languages are not functional languages and nor should they be. But it’s a valid concern, and one I think fluent interfaces can exacerbate.&lt;/p&gt;
&lt;p&gt;Fluent interfaces are not inherently bad, and when the DSL they form closely matches the natural model of a problem (query builders!) they can be very pleasant to work with. But, as with many things in the OOP world, it’s important to be aware of the pitfalls when considering their use.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHPUnit’s Data Providers are your friend</title>
    <link href="https://barlow.dev/posts/phpunits-data-providers-are-your-friend/"/>
    <updated>2024-01-30T21:48:34Z</updated>
    <id>https://barlow.dev/posts/phpunits-data-providers-are-your-friend/</id>
    <content xml:lang="en" type="html">&lt;p&gt;For a while after I got serious about good test coverage, my tests would often end up quite sprawling, usually with only one assertion of any real value per test case.&lt;/p&gt;
&lt;p&gt;Since I started to lean more into PHPUnit’s &lt;a href=&quot;https://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers&quot;&gt;Data Providers&lt;/a&gt;, my tests have become much simpler, and as a result easier to read, review, and maintain. Writing tests is usually not the hardest part of development of course, but I believe that reducing friction as much as possible naturally leads to better tests with more coverage.&lt;/p&gt;
&lt;p&gt;As a toy example, let’s say I’ve configured a route in a Laravel app to allow listing a new product in an e-commerce system. That route has validation that looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;CreateProductFormRequest&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FormRequest&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;required&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;required&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;numeric&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;min:0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;description&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;sometimes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;required&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;min:50&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s probably quite clear from the rule names, but just to clarify for anyone unfamiliar with validation in Laravel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A product name must be included in the request&lt;/li&gt;
&lt;li&gt;A price is required, must be a number or numeric string, and may not be less than zero&lt;/li&gt;
&lt;li&gt;A description is optional, but if included must be at least 50 characters long&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Without a Data Provider&lt;/h2&gt;
&lt;p&gt;In the past, I might have tested that this endpoint accepts what it should, and doesn’t accept what it shouldn’t, with a sprawling set of test cases like this:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;ProductControllerTest&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/** @test */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;it_requires_a_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;products.store&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertInvalid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/** @test */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;it_requires_a_price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/** @test */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;it_does_not_allow_a_negative_price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/** @test */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;it_allows_description_to_be_omitted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/** @test */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;it_requires_a_50_char_description_if_present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* … */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/** @test */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;it_passes_validation_when_conditions_are_met&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;products.store&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;product name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;description&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token class-name class-name-fully-qualified static-context&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;Str&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertSuccessful&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have a series of test cases that make a request to our endpoint with a particular request body, and assert either a success response, or validation failures for specific keys. Having tests is almost always better than not, but there are numerous issues here, many immediately apparent.&lt;/p&gt;
&lt;p&gt;For a start, despite the validation requirements being about as basic as anything you might see in a real app, the number of test cases and lines of code is already getting a bit unweildy.&lt;/p&gt;
&lt;p&gt;Secondly, while the cases I’ve included example code for test &lt;em&gt;a&lt;/em&gt; success or failure, there are numerous edge cases that aren’t covered. For example, what if we have an SPA that calls this route and submits JSON where &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; rather than an empty string, or a bugged form that omits the &lt;code&gt;name&lt;/code&gt; field entirely? We could (and should!) include these, but the “one assertion per case” model tends to lead to a lot of copy-pasting, creating a wall of tests which will leave reviewers bleary-eyed.&lt;/p&gt;
&lt;h2&gt;With a Data Provider&lt;/h2&gt;
&lt;p&gt;Data Providers solve both of these problems nicely. A Data Provider is just a method that returns either an array of arrays, or yields a sequence of arrays. The outer array is effectively a list of test cases, while the inner arrays are the arguments passed to each case:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;ProductControllerTest&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/**
     * @test
     * @dataProvider createProductProvider
     */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;it_validates_as_expected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword type-hint&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$expectedErrors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;products.store&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$expectedErrors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token variable&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertInvalid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$expectedErrors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token variable&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertSuccessful&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;createProductProvider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword return-type&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Request input, expected validation errors&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;empty string name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;null name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;missing name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;non-numeric price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;missing price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price &amp;lt; 0&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price exactly 0&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;no description&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;description &amp;lt; 50 chars&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;price&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;description&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;description&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;/* etc. etc. */&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we need to do is implement a public method that returns our data sets in the proper structure, accept the data as arguments to our test case, and wire it all up using the &lt;code&gt;@dataProvider&lt;/code&gt; docblock tag.&lt;/p&gt;
&lt;p&gt;Now, we only need to write the common logic—making the request and relevant assertions—once, and can cram in as many different permutations of data as we feel are beneficial for the code under test. Adding a new data set is as simple as adding a new entry to the array, which in my experience leads to much wider behaviour coverage, because it makes it so much less onerous to cover all your bases.&lt;/p&gt;
&lt;p&gt;While this example looks just as long as the previous one, what’s being tested is so much less to mentally parse than multiple tests would be (plus I’ve split my arrays over multiple lines because I’m limited on width here 😁). You could also condense several of my example data sets into a single one, but I wanted to highlight how easy it becomes to make sure everything is covered.&lt;/p&gt;
&lt;h2&gt;Structuring your refactored cases&lt;/h2&gt;
&lt;p&gt;It’s not required to label the data sets (e.g. &lt;code&gt;&#39;price &amp;lt; 0&#39;&lt;/code&gt;), but it’s strongly recommended that you do, for two reasons. First, it makes it clear what you’re intending to test, which will assist reviewers and, undoubtedly, future-you. Secondly, if a test does fail, PHPUnit will print out the data set name in the error message, rather than a vague &lt;code&gt;data set #3&lt;/code&gt;. I also like to include a brief comment noting the structure of the values as a bit of additional context, but this is just a personal preference of mine.&lt;/p&gt;
&lt;p&gt;Some might say that conditionally asserting success or failure is a bad idea, as you risk introducing logic errors into the &lt;em&gt;test&lt;/em&gt; that could hide real problems with your application. Personally I find the “if expect-error then specific-failure, else success” pattern to be simple and low risk, but I can totally see the argument. You might instead opt to split your expected successes and failures into two separate test cases with two Data Providers.&lt;/p&gt;
&lt;h2&gt;A note on model factories&lt;/h2&gt;
&lt;p&gt;My examples above are based around Laravel, but if you try to use framework features like model factories in Data Providers, you&#39;re likely to run into somewhat cryptic errors about facade roots, because the Provider runs before the framework boots. Greg Mayes has an &lt;a href=&quot;https://www.gregmayes.dev/posts/2024/02/03/using-laravel-model-factories-in-phpunit-data-providers/&quot;&gt;excellent post on how to solve this&lt;/a&gt; by wrapping the data in closures to delay execution.&lt;/p&gt;
&lt;p&gt;And that’s really all there is to it! Data Providers aren’t a complex feature to use, but they can be a huge help in making tests with many permutations a lot more pleasant to write.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Impressions of Go, from a newbie</title>
    <link href="https://barlow.dev/posts/impressions-of-go-from-a-newbie/"/>
    <updated>2024-01-27T22:52:49Z</updated>
    <id>https://barlow.dev/posts/impressions-of-go-from-a-newbie/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: as the title suggests, I’m still new to Go. It’s entirely possible that some of the things I mention in this post may be based on an incomplete understanding, or it might just be that there’s parts of Go I don’t fully appreciate yet. This is simply my initial impressions, now that I’ve worked on a few real-world projects.&lt;/p&gt;
&lt;p&gt;For reasons which are entirely uncontroversial and completely understandable, my employer is moving towards TypeScript and Go for new services, having historically used PHP for almost everything on the backend.&lt;/p&gt;
&lt;p&gt;Despite its historic association with shoddy code and an infamously inconsistent standard library, PHP today is an excellent tool to power websites and web apps, and you can be incredibly productive just with what the language itself provides. Bring in a full-stack framework like Laravel, and you can build some crazy complex stuff without ever needing additional packages. This post doesn’t have a lot to do with PHP other than the occasional comparison—I just think it deserves a shout out 😁&lt;/p&gt;
&lt;p&gt;Anyway, at work we have definitely been guilty of also using PHP for purposes it is not at all well suited for (e.g. long-running processes), which is one force of many driving the change.&lt;/p&gt;
&lt;h2&gt;Tooling&lt;/h2&gt;
&lt;p&gt;Something that has really stood out to me with Go is the simplicity of the tooling. While I really quite like—and have tremendous respect for—TypeScript as a language, it seems very much bogged down in JavaScript’s insane tooling and ecosystem story.&lt;/p&gt;
&lt;p&gt;Putting aside the fact that any medium-sized project using a handful of useful packages is likely to swell to hundreds of transitive dependencies, even the most basic question of “how should I compile my code?” is drowning in options, each with their own tradeoffs.&lt;/p&gt;
&lt;p&gt;Should I use the built-in compiler? It’s not very fast, and I immediately ran into an issue where neither my editor or the official documentation wants me to use file extensions for local imports, but Node requires that I do. How about esbuild? Very quick, but after a short while I hit a snag where a package I was using &lt;code&gt;require&lt;/code&gt;d something internally which made it throw up errors. Answers online suggested hooking into the build process to insert additional code to dynamically create a &lt;code&gt;require&lt;/code&gt; function which…no thanks. Another team suggested webpack, but I still have PTSD from when my job involved front-end work.&lt;/p&gt;
&lt;p&gt;These are all easily solvable problems I’m sure, but having half a dozen StackOverflow threads open 15 minutes after running &lt;code&gt;git init&lt;/code&gt; does not give a good impression.&lt;/p&gt;
&lt;p&gt;What about testing? Jest seems to be what the cool kids are using these days, so let’s install that. Ah, but I need to support TypeScript, and again I’m faced with at least two choices for how I compile my TypeScript for the test runner, and two further, entirely different choices for how I get type definitions for my editor and the type checker.&lt;/p&gt;
&lt;p&gt;At least Prettier has a good story for automatic formatting: yes it’s another thing to install, but it’ll produce a good result out of the box without needing to configure anything or make any decisions.&lt;/p&gt;
&lt;p&gt;This is in no way meant to be a hit piece on the Node ecosystem, but it does serve as a very illustrative example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do I compile my Go code? &lt;code&gt;go build &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How do I test my Go code? &lt;code&gt;go test &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How do I format my Go code? &lt;code&gt;go fmt &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I realise these sorts of things largely sink into the background once a project is established, but providing the essentials out of the box so I can just get on with building stuff is something I find tremendously valuable.&lt;/p&gt;
&lt;h2&gt;Language&lt;/h2&gt;
&lt;p&gt;Overall, I’ve found Go pleasant to write, though somewhat inexpressive. While it feels clunky that something as common as declaring a variable with one of two initial values is a multi-line operation, I can’t help but respect the almost militant disdain of attempts to be clever. That sounds like a thinly-veiled criticism, but I really do mean it as a compliment: by forcing everything to be written plainly, Go is very readable. I found myself comfortable scanning through a medium-sized codebase within a couple of hours of first starting to look at the language. There are few tricks and little magic, and despite a couple of footguns when &lt;em&gt;writing&lt;/em&gt; Go, reading it has been delightfully straightforward so far.&lt;/p&gt;
&lt;p&gt;I still think the lack of a ternary operator is a mistake though; especially when nested ternaries—which appear to be the primary rationale behind its omission—could be easily forbidden via linting or code review. I guess you could implement it as a function if you really wanted to.&lt;/p&gt;
&lt;h3&gt;Type system and conventions&lt;/h3&gt;
&lt;p&gt;I often found myself wishing for more modern affordances in the type system, like sum types—particularly with regard to how optionality is modelled (or isn’t). I realise that might sound odd from someone who’s spent most of his career writing PHP, but at least in PHP &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;?T&lt;/code&gt; (“nullable &lt;code&gt;T&lt;/code&gt;”) are distinct types, and that distinction applies to both value and reference types equally. This alone is surprisingly powerful for avoiding a whole class of errors, at least assuming you’re using a static analyser or a half-decent editor—PHP itself of course has no compilation stage to catch type errors before runtime.&lt;/p&gt;
&lt;p&gt;The most common way to represent optionality in Go is to either use a pointer, or to rely always having a zero-value if you don’t specify otherwise. Which I guess are the same thing, given a pointer’s zero-value is &lt;code&gt;nil&lt;/code&gt;. I don’t find either of these particularly compelling solutions to modelling data that is permitted to have no value.&lt;/p&gt;
&lt;p&gt;Using a pointer muddles the semantics; am I passing a pointer because I want the function to be able to change the value, for performance reasons, or because it might be &lt;code&gt;nil&lt;/code&gt;? Conversely, Go has no type-level mechanism to enforce that a pointer I receive or return will &lt;em&gt;not&lt;/em&gt; be &lt;code&gt;nil&lt;/code&gt;. As for zero-values, they are, at least in the contexts I work, almost always a non-starter. There are simply too many cases where the zero-value is also a valid value in the model, but where I still need to discern between “no value” and “zero”.&lt;/p&gt;
&lt;p&gt;Granted, now that Go has generics, creating your own &lt;code&gt;Optional[T]&lt;/code&gt; type is trivial, but not being part of the standard library limits the effectiveness of doing so, as there’s no common, shared implementation that all code uses by default. The lack of sum types also precludes any protections against attempting to unwrap a value which doesn’t exist. Compare this to Swift’s &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;: you can be certain that every single piece of Swift code—first- or third-party—will use it to model optionality, and the semantics of enums in Swift force you both to check there is a value before using it, and to handle the case where there isn’t. (Yes, I know Swift has &lt;code&gt;!&lt;/code&gt; to force-unwrap an optional, but this is largely in service of the mountain of existing Objective-C libraries from Apple that do not have those guarantees.)&lt;/p&gt;
&lt;p&gt;In the same class as optionals are result types. If you’re not familiar, as &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; models that the function returns a value of type &lt;code&gt;T&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; nothing, &lt;code&gt;Result&amp;lt;T, Error&amp;gt;&lt;/code&gt; models a value &lt;em&gt;or&lt;/em&gt; an error. Go’s first-class support for multiple return values is nice, but the convention of &lt;code&gt;func Foo() (T, error)&lt;/code&gt; is just that: a convention. An incredibly strong one, sure, but the language does little to prevent me accidentally doing something stupid when faced with an error. Humans are endlessly fallible, but smart people have designed good solutions to guard against mistakes this common, so it’s a shame that Go ignores many of them.&lt;/p&gt;
&lt;p&gt;Another pitfall with the &lt;code&gt;(T, error)&lt;/code&gt; return pattern is that, especially if &lt;code&gt;T&lt;/code&gt; is a value, you’re still getting something “valid” back from the function even when an error occurs. That makes it way easier than it should be to accidentally proceed, and end up failing somewhere down the line in a way you &lt;em&gt;thought&lt;/em&gt; was impossible.&lt;/p&gt;
&lt;p&gt;On that subject, I’m not sure how I feel about everything being initialised by default. It can certainly be very useful, but I think I’d prefer it if you had to explicitly initialise zero-values with &lt;code&gt;new(T)&lt;/code&gt;, making uses of uninitialised variables a compile-time error. Much like with return values, having everything be valid right away makes it easier to accidentally continue execution in cases you don’t intend to.&lt;/p&gt;
&lt;p&gt;I also find the idea of pointer and value method receivers to also be a little perplexing. Not because I don’t understand them; as the Go FAQ points out, most languages with a concept of methods feature &lt;code&gt;this&lt;/code&gt; as a reference, rather than a copy. “It is the value receivers in Go that are unusual”, after all.&lt;/p&gt;
&lt;p&gt;Rather, I don’t really see what purpose value receivers serve. Yes, they ensure that the method can’t mutate the value it’s called on, but Go has almost no concept of immutability anyway. It’s strongly recommended that receiver types for an interface aren’t mixed, so if you’re the implementer, there’s a good chance you’re going to end up using all pointer receivers even if some methods would be better as values. If you’re the caller, there’s an equally decent chance you’ll be calling the method on an interface type, in which case you don’t, can’t, and by design &lt;em&gt;shouldn’t&lt;/em&gt; be able to know which receiver type it is. All said, it makes the applicability of value receivers seem incredibly narrow, and therefore a bit of an odd inclusion. Maybe I’m just missing some killer use case for them.&lt;/p&gt;
&lt;p&gt;Anyway, rants over: let’s talk about some really great stuff.&lt;/p&gt;
&lt;h3&gt;Dodging inheritance tax&lt;/h3&gt;
&lt;p&gt;The use of structural typing and the omission of classical inheritance is a breath of fresh air.&lt;/p&gt;
&lt;p&gt;On structural typing, there’s not all that much to say. Whether it’s a Duck or a Mallard is immaterial; I just need something that quacks. Using a language with structural typing makes you wonder why nominal type systems need to make everything so unwieldy. (Credit to TypeScript, which takes this one step further by not even requiring you create a name to cover &lt;code&gt;quacker&lt;/code&gt;s, by virtue of its inline structural type annotations.)&lt;/p&gt;
&lt;p&gt;The flexibility here also makes testing easier. I was recently working on a project using just two methods from the AWS SDK. When writing tests, I could simply tweak my code slightly to replace the concrete &lt;code&gt;*s3.Client&lt;/code&gt; with an interface &lt;code&gt;S3Client&lt;/code&gt;, specifying only the methods I was actually using. With that, my mocks needed only to stub those methods, rather than the hundreds in the actual SDK, with no changes needed to any calling code.&lt;/p&gt;
&lt;p&gt;As for inheritance: this is my eighth year of developing software professionally, and in that time I’ve come to view inheritance as a leaky abstraction that should be used sparingly, if at all. Some of this arises from personal experience: there is only so many times you can debug some code that depends on a complex web of state and implementation defined across 3+ layers of sub- and super-classes before you lose the will to live.&lt;/p&gt;
&lt;p&gt;While it doesn’t inherently &lt;em&gt;have&lt;/em&gt; to, in my experience the ability to dynamically weave little bits of internal functionality and tweak it to slightly different ends leads to class hierarchies which are responsible for far too much, which in turns leads to complex and brittle code. Then, when you come to test it, you have a big opaque blob that requires initialising the whole world before making assertions about any individual thing. Or, to say it another way, inheritance doesn’t preclude anyone writing well structured code, but it does make it very tempting to produce something poorly structured in ways that don’t immediately reveal themselves.&lt;/p&gt;
&lt;p&gt;Conversely, if you want to add flexibility without inheritance you are forced into composition, and “depth” (the class hierarchy) is transposed into “width” (separating distinct functionality into dependencies that are passed in). This requires you to really think about where responsibility boundaries lie, and ultimately leads to code that is not only easier to test and reason about, but is often significantly &lt;em&gt;more&lt;/em&gt; flexible than the inheritance-based equivalent.&lt;/p&gt;
&lt;p&gt;Big thumbs up from me.&lt;/p&gt;
&lt;h3&gt;Concurrency&lt;/h3&gt;
&lt;p&gt;My opinion on this matter isn’t worth a whole lot—you &lt;em&gt;can&lt;/em&gt; write concurrent PHP, but it’s about as advisable as templating your website markup with C—but goroutines and channels have been a delight, and with a few simple rules provide a concurrency model that is as powerful as it is easy to use.&lt;/p&gt;
&lt;p&gt;I was able to implement a feature that concurrently fetched pages of data from an API while processing multiple results from the current page, with code that was just as simple as it would be if it was synchronous. I never had to worry about cascading function colouring, and it all worked exactly like I expected it to the first time. I’m sure there’s some complexities lurking when things get really complex, but for the case of “I would like to do 20 of this at the same time”, it really couldn’t be easier.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When writing this post, at times I felt like I might unfairly be wanting to turn Go into a language it never claimed to be. But on balance, I think my gripes, if addressed in a hypothetical “Go 2”, would not fundamentally change the principles it adheres to. It was built at least in part to be a language in which inexperienced developers could write good software without shooting themselves in the foot, and while it succeeds in many areas, it also ignores many of the advances in type systems and language design from the last 20 years. Hopefully some of these can find their way into the language in an idiomatic way, much as generics have.&lt;/p&gt;
&lt;p&gt;That said, it would appear there is a lot more Go in my professional future, and I’m very much not mad about that.&lt;/p&gt;
&lt;p&gt;I’d still really like a proper &lt;code&gt;Optional&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; though.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Query-time Attribute Casting in Laravel</title>
    <link href="https://barlow.dev/posts/query-time-attribute-casting-in-laravel/"/>
    <updated>2020-05-31T15:10:00Z</updated>
    <id>https://barlow.dev/posts/query-time-attribute-casting-in-laravel/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Back in January &lt;a href=&quot;https://github.com/laravel/framework/pull/31102&quot;&gt;I opened a small pull request to the Laravel framework&lt;/a&gt; to enable query-time casting of Eloquent attributes. Laravel already allowed static casting, where an array &lt;code&gt;$casts&lt;/code&gt; could be defined on a model, containing key-value pairs of attributes and the data type they should be automatically cast to. This is a very nice quality-of-life feature for things like dates or JSON columns, allowing you to transparently map flat data to rich objects.&lt;/p&gt;
&lt;p&gt;For Laravel 6, &lt;a href=&quot;https://twitter.com/reinink&quot;&gt;Jonathan Reinink&lt;/a&gt; submitted some &lt;a href=&quot;https://github.com/laravel/framework/pull/29567&quot;&gt;very nice improvements&lt;/a&gt; to subquery selects, which I eagerly adopted in both personal and work projects.&lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;One small snag came to light though: while I could now use subqueries more easily than ever, the resulting values were always plain text. In one particular system I manage, a common type of query results in several dates, where the columns on the main table being queried are automatically cast to Carbon objects, while the columns selected from subqueries are plain text timestamps.&lt;/p&gt;
&lt;p&gt;While far from the end of the world, it was a pain to deal with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You could &amp;quot;just-in-time&amp;quot; convert to a Carbon instance by hand, perhaps when the date is displayed. But creating a new instance inside a view feels wrong, and assigning it to a variable if the date is referenced multiple times is out of the question. Not to mention needing to remember which dates need to be manually cast and which don’t, or handing null values — yuck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manually setting the attribute value to a Carbon instance immediately after the query feels like pointless busywork, especially if you have multiple values to convert, or similar queries in multiple places.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because of the way &lt;code&gt;$casts&lt;/code&gt; works, you can actually add your dynamic columns even if they aren&#39;t present on the model the majority of the time, and it will work. This has a few problems though. For one, you&#39;re just asking for someone to refactor them away without realising their purpose — lets hope your tests catch it! Second, it&#39;s just plain messy. The &lt;code&gt;$casts&lt;/code&gt; array itself is fine because it&#39;s globally applicable, but to mix in casts that are only relevant to one or two places in your entire app makes things hard to follow. Lastly, it&#39;s inflexible. While it&#39;s not likely to happen all that often, a single static list of casts does not allow you to re-define casts for specific queries, nor map the same derived column name to varying data types.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in mind, I set out to try to add a method to the Eloquent query builder allowing the user to specify additional or modified casts as part of the query, just like eager loading or fetching a related count. Such a feature must only affect the current query, must have no negative performance implications, and most importantly, must be succinct and easy to reason about. With the change affecting such a core part of the framework, a huge sprawling change would (quite rightly) be unlikely to be considered, especially from a first-time contributor.&lt;/p&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;As a testament to how easy Laravel is to work with, the feature was implemented in a grand total of &lt;a href=&quot;https://github.com/laravel/framework/pull/31102/files&quot;&gt;4 lines of code&lt;/a&gt;, not counting the method definitions (for comparison, the corresponding tests outweigh the feature itself by about 4:1).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$casts&lt;/code&gt; itself is a protected property, so we can’t modify that directly. The solution here was to add a new public method to the &lt;code&gt;HasAttributes&lt;/code&gt; trait, where the existing cast functionality is defined. The new &lt;code&gt;mergeCasts&lt;/code&gt; method does as described; allows us to merge a given array of casts with any existing casts on the model. Thanks to how &lt;code&gt;array_merge&lt;/code&gt; works, this allows us to replace existing casts and define any new ones at the same time.&lt;/p&gt;
&lt;p&gt;From there we can add a &lt;code&gt;withCasts&lt;/code&gt; method to the query builder (named in line with &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;withCount&lt;/code&gt;, etc.). This simply calls &lt;code&gt;mergeCasts&lt;/code&gt; on the internal model instance every Eloquent query builder points to.&lt;/p&gt;
&lt;p&gt;Finally, for each record in the query result, the model’s &lt;code&gt;newInstance&lt;/code&gt; method is called. This sets the raw attributes, as well as things like the database connection. Because attribute casting is not performed until &lt;em&gt;after&lt;/em&gt; this step, we need to ensure that each new model instance uses our altered &lt;code&gt;$casts&lt;/code&gt; array. So we call &lt;code&gt;mergeCasts&lt;/code&gt; again (on the new instance this time) to keep everything inline with the casts set via the builder.&lt;/p&gt;
&lt;p&gt;And that’s all there is to it! The feature was merged in (my first open-source contribution!), and as of Laravel 7 you can specify any casts you like at the query level:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token class-name static-context&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;users.*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;last_posted_at&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token class-name static-context&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;selectRaw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;MAX(created_at)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;whereColumn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;user_id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;users.id&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCasts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;last_posted_at&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an added bonus, because it just uses the cast functionality that already existed in the framework, it works nicely with the &lt;a href=&quot;https://github.com/laravel/framework/pull/31035&quot;&gt;custom cast types feature&lt;/a&gt; that was also added in Laravel 7.&lt;/p&gt;
</content>
  </entry>
</feed>